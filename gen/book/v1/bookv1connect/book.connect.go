// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: book/v1/book.proto

package bookv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/znbang/eventmap/gen/book/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BookServiceName is the fully-qualified name of the BookService service.
	BookServiceName = "book.v1.BookService"
)

// BookServiceClient is a client for the book.v1.BookService service.
type BookServiceClient interface {
	CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error)
	UpdateBook(context.Context, *connect_go.Request[v1.UpdateBookRequest]) (*connect_go.Response[v1.UpdateBookResponse], error)
	DeleteBook(context.Context, *connect_go.Request[v1.DeleteBookRequest]) (*connect_go.Response[v1.DeleteBookResponse], error)
	DeleteChapter(context.Context, *connect_go.Request[v1.DeleteChapterRequest]) (*connect_go.Response[v1.DeleteChapterResponse], error)
	GetBook(context.Context, *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.GetBookResponse], error)
	GetToc(context.Context, *connect_go.Request[v1.GetTocRequest]) (*connect_go.Response[v1.GetTocResponse], error)
	GetChapter(context.Context, *connect_go.Request[v1.GetChapterRequest]) (*connect_go.Response[v1.GetChapterResponse], error)
	ListBook(context.Context, *connect_go.Request[v1.ListBookRequest]) (*connect_go.Response[v1.ListBookResponse], error)
	SyncNew(context.Context, *connect_go.Request[v1.SyncNewRequest]) (*connect_go.Response[v1.SyncNewResponse], error)
	SyncAll(context.Context, *connect_go.Request[v1.SyncAllRequest]) (*connect_go.Response[v1.SyncAllResponse], error)
	StopSync(context.Context, *connect_go.Request[v1.StopSyncRequest]) (*connect_go.Response[v1.StopSyncResponse], error)
	SyncStatus(context.Context, *connect_go.Request[v1.SyncStatusRequest]) (*connect_go.ServerStreamForClient[v1.SyncStatusResponse], error)
	DownloadBook(context.Context, *connect_go.Request[v1.DownloadBookRequest]) (*connect_go.Response[v1.DownloadBookResponse], error)
}

// NewBookServiceClient constructs a client for the book.v1.BookService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookServiceClient{
		createBook: connect_go.NewClient[v1.CreateBookRequest, v1.CreateBookResponse](
			httpClient,
			baseURL+"/book.v1.BookService/CreateBook",
			opts...,
		),
		updateBook: connect_go.NewClient[v1.UpdateBookRequest, v1.UpdateBookResponse](
			httpClient,
			baseURL+"/book.v1.BookService/UpdateBook",
			opts...,
		),
		deleteBook: connect_go.NewClient[v1.DeleteBookRequest, v1.DeleteBookResponse](
			httpClient,
			baseURL+"/book.v1.BookService/DeleteBook",
			opts...,
		),
		deleteChapter: connect_go.NewClient[v1.DeleteChapterRequest, v1.DeleteChapterResponse](
			httpClient,
			baseURL+"/book.v1.BookService/DeleteChapter",
			opts...,
		),
		getBook: connect_go.NewClient[v1.GetBookRequest, v1.GetBookResponse](
			httpClient,
			baseURL+"/book.v1.BookService/GetBook",
			opts...,
		),
		getToc: connect_go.NewClient[v1.GetTocRequest, v1.GetTocResponse](
			httpClient,
			baseURL+"/book.v1.BookService/GetToc",
			opts...,
		),
		getChapter: connect_go.NewClient[v1.GetChapterRequest, v1.GetChapterResponse](
			httpClient,
			baseURL+"/book.v1.BookService/GetChapter",
			opts...,
		),
		listBook: connect_go.NewClient[v1.ListBookRequest, v1.ListBookResponse](
			httpClient,
			baseURL+"/book.v1.BookService/ListBook",
			opts...,
		),
		syncNew: connect_go.NewClient[v1.SyncNewRequest, v1.SyncNewResponse](
			httpClient,
			baseURL+"/book.v1.BookService/SyncNew",
			opts...,
		),
		syncAll: connect_go.NewClient[v1.SyncAllRequest, v1.SyncAllResponse](
			httpClient,
			baseURL+"/book.v1.BookService/SyncAll",
			opts...,
		),
		stopSync: connect_go.NewClient[v1.StopSyncRequest, v1.StopSyncResponse](
			httpClient,
			baseURL+"/book.v1.BookService/StopSync",
			opts...,
		),
		syncStatus: connect_go.NewClient[v1.SyncStatusRequest, v1.SyncStatusResponse](
			httpClient,
			baseURL+"/book.v1.BookService/SyncStatus",
			opts...,
		),
		downloadBook: connect_go.NewClient[v1.DownloadBookRequest, v1.DownloadBookResponse](
			httpClient,
			baseURL+"/book.v1.BookService/DownloadBook",
			opts...,
		),
	}
}

// bookServiceClient implements BookServiceClient.
type bookServiceClient struct {
	createBook    *connect_go.Client[v1.CreateBookRequest, v1.CreateBookResponse]
	updateBook    *connect_go.Client[v1.UpdateBookRequest, v1.UpdateBookResponse]
	deleteBook    *connect_go.Client[v1.DeleteBookRequest, v1.DeleteBookResponse]
	deleteChapter *connect_go.Client[v1.DeleteChapterRequest, v1.DeleteChapterResponse]
	getBook       *connect_go.Client[v1.GetBookRequest, v1.GetBookResponse]
	getToc        *connect_go.Client[v1.GetTocRequest, v1.GetTocResponse]
	getChapter    *connect_go.Client[v1.GetChapterRequest, v1.GetChapterResponse]
	listBook      *connect_go.Client[v1.ListBookRequest, v1.ListBookResponse]
	syncNew       *connect_go.Client[v1.SyncNewRequest, v1.SyncNewResponse]
	syncAll       *connect_go.Client[v1.SyncAllRequest, v1.SyncAllResponse]
	stopSync      *connect_go.Client[v1.StopSyncRequest, v1.StopSyncResponse]
	syncStatus    *connect_go.Client[v1.SyncStatusRequest, v1.SyncStatusResponse]
	downloadBook  *connect_go.Client[v1.DownloadBookRequest, v1.DownloadBookResponse]
}

// CreateBook calls book.v1.BookService.CreateBook.
func (c *bookServiceClient) CreateBook(ctx context.Context, req *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error) {
	return c.createBook.CallUnary(ctx, req)
}

// UpdateBook calls book.v1.BookService.UpdateBook.
func (c *bookServiceClient) UpdateBook(ctx context.Context, req *connect_go.Request[v1.UpdateBookRequest]) (*connect_go.Response[v1.UpdateBookResponse], error) {
	return c.updateBook.CallUnary(ctx, req)
}

// DeleteBook calls book.v1.BookService.DeleteBook.
func (c *bookServiceClient) DeleteBook(ctx context.Context, req *connect_go.Request[v1.DeleteBookRequest]) (*connect_go.Response[v1.DeleteBookResponse], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// DeleteChapter calls book.v1.BookService.DeleteChapter.
func (c *bookServiceClient) DeleteChapter(ctx context.Context, req *connect_go.Request[v1.DeleteChapterRequest]) (*connect_go.Response[v1.DeleteChapterResponse], error) {
	return c.deleteChapter.CallUnary(ctx, req)
}

// GetBook calls book.v1.BookService.GetBook.
func (c *bookServiceClient) GetBook(ctx context.Context, req *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.GetBookResponse], error) {
	return c.getBook.CallUnary(ctx, req)
}

// GetToc calls book.v1.BookService.GetToc.
func (c *bookServiceClient) GetToc(ctx context.Context, req *connect_go.Request[v1.GetTocRequest]) (*connect_go.Response[v1.GetTocResponse], error) {
	return c.getToc.CallUnary(ctx, req)
}

// GetChapter calls book.v1.BookService.GetChapter.
func (c *bookServiceClient) GetChapter(ctx context.Context, req *connect_go.Request[v1.GetChapterRequest]) (*connect_go.Response[v1.GetChapterResponse], error) {
	return c.getChapter.CallUnary(ctx, req)
}

// ListBook calls book.v1.BookService.ListBook.
func (c *bookServiceClient) ListBook(ctx context.Context, req *connect_go.Request[v1.ListBookRequest]) (*connect_go.Response[v1.ListBookResponse], error) {
	return c.listBook.CallUnary(ctx, req)
}

// SyncNew calls book.v1.BookService.SyncNew.
func (c *bookServiceClient) SyncNew(ctx context.Context, req *connect_go.Request[v1.SyncNewRequest]) (*connect_go.Response[v1.SyncNewResponse], error) {
	return c.syncNew.CallUnary(ctx, req)
}

// SyncAll calls book.v1.BookService.SyncAll.
func (c *bookServiceClient) SyncAll(ctx context.Context, req *connect_go.Request[v1.SyncAllRequest]) (*connect_go.Response[v1.SyncAllResponse], error) {
	return c.syncAll.CallUnary(ctx, req)
}

// StopSync calls book.v1.BookService.StopSync.
func (c *bookServiceClient) StopSync(ctx context.Context, req *connect_go.Request[v1.StopSyncRequest]) (*connect_go.Response[v1.StopSyncResponse], error) {
	return c.stopSync.CallUnary(ctx, req)
}

// SyncStatus calls book.v1.BookService.SyncStatus.
func (c *bookServiceClient) SyncStatus(ctx context.Context, req *connect_go.Request[v1.SyncStatusRequest]) (*connect_go.ServerStreamForClient[v1.SyncStatusResponse], error) {
	return c.syncStatus.CallServerStream(ctx, req)
}

// DownloadBook calls book.v1.BookService.DownloadBook.
func (c *bookServiceClient) DownloadBook(ctx context.Context, req *connect_go.Request[v1.DownloadBookRequest]) (*connect_go.Response[v1.DownloadBookResponse], error) {
	return c.downloadBook.CallUnary(ctx, req)
}

// BookServiceHandler is an implementation of the book.v1.BookService service.
type BookServiceHandler interface {
	CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error)
	UpdateBook(context.Context, *connect_go.Request[v1.UpdateBookRequest]) (*connect_go.Response[v1.UpdateBookResponse], error)
	DeleteBook(context.Context, *connect_go.Request[v1.DeleteBookRequest]) (*connect_go.Response[v1.DeleteBookResponse], error)
	DeleteChapter(context.Context, *connect_go.Request[v1.DeleteChapterRequest]) (*connect_go.Response[v1.DeleteChapterResponse], error)
	GetBook(context.Context, *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.GetBookResponse], error)
	GetToc(context.Context, *connect_go.Request[v1.GetTocRequest]) (*connect_go.Response[v1.GetTocResponse], error)
	GetChapter(context.Context, *connect_go.Request[v1.GetChapterRequest]) (*connect_go.Response[v1.GetChapterResponse], error)
	ListBook(context.Context, *connect_go.Request[v1.ListBookRequest]) (*connect_go.Response[v1.ListBookResponse], error)
	SyncNew(context.Context, *connect_go.Request[v1.SyncNewRequest]) (*connect_go.Response[v1.SyncNewResponse], error)
	SyncAll(context.Context, *connect_go.Request[v1.SyncAllRequest]) (*connect_go.Response[v1.SyncAllResponse], error)
	StopSync(context.Context, *connect_go.Request[v1.StopSyncRequest]) (*connect_go.Response[v1.StopSyncResponse], error)
	SyncStatus(context.Context, *connect_go.Request[v1.SyncStatusRequest], *connect_go.ServerStream[v1.SyncStatusResponse]) error
	DownloadBook(context.Context, *connect_go.Request[v1.DownloadBookRequest]) (*connect_go.Response[v1.DownloadBookResponse], error)
}

// NewBookServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookServiceHandler(svc BookServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/book.v1.BookService/CreateBook", connect_go.NewUnaryHandler(
		"/book.v1.BookService/CreateBook",
		svc.CreateBook,
		opts...,
	))
	mux.Handle("/book.v1.BookService/UpdateBook", connect_go.NewUnaryHandler(
		"/book.v1.BookService/UpdateBook",
		svc.UpdateBook,
		opts...,
	))
	mux.Handle("/book.v1.BookService/DeleteBook", connect_go.NewUnaryHandler(
		"/book.v1.BookService/DeleteBook",
		svc.DeleteBook,
		opts...,
	))
	mux.Handle("/book.v1.BookService/DeleteChapter", connect_go.NewUnaryHandler(
		"/book.v1.BookService/DeleteChapter",
		svc.DeleteChapter,
		opts...,
	))
	mux.Handle("/book.v1.BookService/GetBook", connect_go.NewUnaryHandler(
		"/book.v1.BookService/GetBook",
		svc.GetBook,
		opts...,
	))
	mux.Handle("/book.v1.BookService/GetToc", connect_go.NewUnaryHandler(
		"/book.v1.BookService/GetToc",
		svc.GetToc,
		opts...,
	))
	mux.Handle("/book.v1.BookService/GetChapter", connect_go.NewUnaryHandler(
		"/book.v1.BookService/GetChapter",
		svc.GetChapter,
		opts...,
	))
	mux.Handle("/book.v1.BookService/ListBook", connect_go.NewUnaryHandler(
		"/book.v1.BookService/ListBook",
		svc.ListBook,
		opts...,
	))
	mux.Handle("/book.v1.BookService/SyncNew", connect_go.NewUnaryHandler(
		"/book.v1.BookService/SyncNew",
		svc.SyncNew,
		opts...,
	))
	mux.Handle("/book.v1.BookService/SyncAll", connect_go.NewUnaryHandler(
		"/book.v1.BookService/SyncAll",
		svc.SyncAll,
		opts...,
	))
	mux.Handle("/book.v1.BookService/StopSync", connect_go.NewUnaryHandler(
		"/book.v1.BookService/StopSync",
		svc.StopSync,
		opts...,
	))
	mux.Handle("/book.v1.BookService/SyncStatus", connect_go.NewServerStreamHandler(
		"/book.v1.BookService/SyncStatus",
		svc.SyncStatus,
		opts...,
	))
	mux.Handle("/book.v1.BookService/DownloadBook", connect_go.NewUnaryHandler(
		"/book.v1.BookService/DownloadBook",
		svc.DownloadBook,
		opts...,
	))
	return "/book.v1.BookService/", mux
}

// UnimplementedBookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookServiceHandler struct{}

func (UnimplementedBookServiceHandler) CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.CreateBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.CreateBook is not implemented"))
}

func (UnimplementedBookServiceHandler) UpdateBook(context.Context, *connect_go.Request[v1.UpdateBookRequest]) (*connect_go.Response[v1.UpdateBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.UpdateBook is not implemented"))
}

func (UnimplementedBookServiceHandler) DeleteBook(context.Context, *connect_go.Request[v1.DeleteBookRequest]) (*connect_go.Response[v1.DeleteBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.DeleteBook is not implemented"))
}

func (UnimplementedBookServiceHandler) DeleteChapter(context.Context, *connect_go.Request[v1.DeleteChapterRequest]) (*connect_go.Response[v1.DeleteChapterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.DeleteChapter is not implemented"))
}

func (UnimplementedBookServiceHandler) GetBook(context.Context, *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.GetBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.GetBook is not implemented"))
}

func (UnimplementedBookServiceHandler) GetToc(context.Context, *connect_go.Request[v1.GetTocRequest]) (*connect_go.Response[v1.GetTocResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.GetToc is not implemented"))
}

func (UnimplementedBookServiceHandler) GetChapter(context.Context, *connect_go.Request[v1.GetChapterRequest]) (*connect_go.Response[v1.GetChapterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.GetChapter is not implemented"))
}

func (UnimplementedBookServiceHandler) ListBook(context.Context, *connect_go.Request[v1.ListBookRequest]) (*connect_go.Response[v1.ListBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.ListBook is not implemented"))
}

func (UnimplementedBookServiceHandler) SyncNew(context.Context, *connect_go.Request[v1.SyncNewRequest]) (*connect_go.Response[v1.SyncNewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.SyncNew is not implemented"))
}

func (UnimplementedBookServiceHandler) SyncAll(context.Context, *connect_go.Request[v1.SyncAllRequest]) (*connect_go.Response[v1.SyncAllResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.SyncAll is not implemented"))
}

func (UnimplementedBookServiceHandler) StopSync(context.Context, *connect_go.Request[v1.StopSyncRequest]) (*connect_go.Response[v1.StopSyncResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.StopSync is not implemented"))
}

func (UnimplementedBookServiceHandler) SyncStatus(context.Context, *connect_go.Request[v1.SyncStatusRequest], *connect_go.ServerStream[v1.SyncStatusResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.SyncStatus is not implemented"))
}

func (UnimplementedBookServiceHandler) DownloadBook(context.Context, *connect_go.Request[v1.DownloadBookRequest]) (*connect_go.Response[v1.DownloadBookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("book.v1.BookService.DownloadBook is not implemented"))
}
